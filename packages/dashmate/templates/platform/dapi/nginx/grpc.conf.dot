log_format grpc_json escape=json '{"timestamp":"$time_iso8601","client":"$remote_addr",'
                                  '"uri":"$uri","http-status":$status,'
                                  '"grpc-status":$grpc_status,"upstream":"$upstream_addr"'
                                  '"rx-bytes":$request_length,"tx-bytes":$bytes_sent}';

map $upstream_trailer_grpc_status $grpc_status {
    default $upstream_trailer_grpc_status; # We normally expect to receive
                                           # grpc-status as a trailer
    ''      $sent_http_grpc_status;        # Else use the header, regardless of
                                           # who generated it
}

server {
    listen 50051 http2;

    access_log /dev/stdout grpc_json;
    {{? it.platform.dapi.nginx.rateLimiter.enable}}
    limit_req zone=protect_api burst={{=it.platform.dapi.nginx.rateLimiter.burst}} nodelay;
    limit_req_status 429;
    {{?}}
    location = /org.dash.platform.dapi.v0.Core/subscribeToTransactionsWithProofs {
        grpc_pass grpc://dapi_tx_filter_stream:3006;
        grpc_buffer_size 128k;
    }

    location ~ ^/org\.dash\.platform\.dapi\.v0\.Core {
        grpc_pass grpc://dapi_api:3005;
        grpc_buffer_size 128k;
    }

    location ~ ^/org\.dash\.platform\.dapi\.v0\.Platform {
        grpc_pass grpc://dapi_api:3005;
        grpc_buffer_size 128k;
    }

    location /grpc.health.v1.Health {
        grpc_pass grpc://dapi_tx_filter_stream:3006;
    }

    location ~ ^/org\.dash\.platform\.dapi\.v[0-9]+\.Core {
      add_header content-type application/grpc;
      add_header grpc-status 12;
      add_header grpc-message "Specified service version is not supported";
      return 204;
    }

    location ~ ^/org\.dash\.platform\.dapi\.v[0-9]+\.Platform {
      add_header content-type application/grpc;
      add_header grpc-status 12;
      add_header grpc-message "Specified service version is not supported";
      return 204;
   }

    # Error responses
    include /etc/nginx/conf.d/errors.grpc_conf; # gRPC-compliant error responses
    default_type application/grpc;   # Ensure gRPC for all error responses
}
